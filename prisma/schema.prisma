// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "postgresql"
	url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
	id                       String  @id @default(cuid())
	userId                   String
	type                     String
	provider                 String
	providerAccountId        String
	refresh_token            String? // @db.Text
	access_token             String? // @db.Text
	expires_at               Int?
	token_type               String?
	scope                    String?
	id_token                 String? // @db.Text
	session_state            String?
	user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
	refresh_token_expires_in Int?

	@@unique([provider, providerAccountId])
}

model Session {
	id           String   @id @default(cuid())
	sessionToken String   @unique
	userId       String
	expires      DateTime
	user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
	id            String    @id @default(cuid())
	name          String?
	email         String?   @unique
	emailVerified DateTime?
	image         String?
	accounts      Account[]
	sessions      Session[]
	bases         Base[]
}

model VerificationToken {
	identifier String
	token      String   @unique
	expires    DateTime

	@@unique([identifier, token])
}

// Table
model Base {
  id       String   @id @default(cuid())
  name     String
  userId   String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tables   Table[]
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id       String   @id @default(cuid())
  name     String
  baseId   String
  base     Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  columns  Column[]
  rows     Row[]
	sortConfig Json?
}

model Column {
  id       String   @id @default(cuid())
  name     String
  type     ColumnType
  tableId  String
  table    Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
  order    Int      @default(0)
  cells    Cell[]
}

model Row {
	id       String   @id @default(cuid())
	tableId  String
	table    Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
	order    Int   		@default(0)
  cells    Cell[]
}

model Cell {
  id        String   @id @default(cuid())
  rowId     String
  columnId  String
  value     String
  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  column    Column  @relation(fields: [columnId], references: [id], onDelete: Cascade)
}

enum ColumnType {
	TEXT
	NUMBER
}